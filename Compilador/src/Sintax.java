
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Nov 27 21:33:35 CST 2024
//----------------------------------------------------

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;
import java.util.HashSet;
import java.util.Set;
import java.util.Stack;
import java.util.Arrays;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Nov 27 21:33:35 CST 2024
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\214\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\003\003\000\002\004\010" +
    "\000\002\004\010\000\002\004\004\000\002\007\003\000" +
    "\002\007\002\000\002\005\005\000\002\005\003\000\002" +
    "\006\004\000\002\010\004\000\002\010\003\000\002\011" +
    "\007\000\002\011\010\000\002\011\004\000\002\011\004" +
    "\000\002\011\005\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\004\000\002" +
    "\012\004\000\002\012\004\000\002\012\005\000\002\013" +
    "\004\000\002\013\002\000\002\014\003\000\002\014\003" +
    "\000\002\016\006\000\002\016\002\000\002\017\006\000" +
    "\002\017\005\000\002\017\005\000\002\020\004\000\002" +
    "\020\002\000\002\061\005\000\002\061\004\000\002\061" +
    "\004\000\002\021\005\000\002\021\003\000\002\022\005" +
    "\000\002\022\003\000\002\015\003\000\002\015\004\000" +
    "\002\015\003\000\002\015\003\000\002\015\007\000\002" +
    "\015\005\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\025\003" +
    "\000\002\025\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\026\005\000\002\026\003\000\002\027\005\000\002\027" +
    "\003\000\002\027\006\000\002\027\003\000\002\031\005" +
    "\000\002\030\004\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\033\003\000\002\033\003\000\002\034" +
    "\003\000\002\035\004\000\002\035\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\037\005\000\002\045\004\000\002" +
    "\045\002\000\002\044\003\000\002\044\003\000\002\044" +
    "\003\000\002\044\003\000\002\044\005\000\002\044\004" +
    "\000\002\044\004\000\002\040\007\000\002\040\011\000" +
    "\002\040\005\000\002\042\012\000\002\042\011\000\002" +
    "\042\011\000\002\042\010\000\002\042\005\000\002\042" +
    "\010\000\002\043\007\000\002\043\004\000\002\043\003" +
    "\000\002\046\007\000\002\046\007\000\002\046\005\000" +
    "\002\046\006\000\002\047\011\000\002\047\005\000\002" +
    "\050\004\000\002\051\004\000\002\051\002\000\002\052" +
    "\007\000\002\054\006\000\002\054\002\000\002\053\003" +
    "\000\002\053\002\000\002\055\007\000\002\055\005\000" +
    "\002\057\003\000\002\057\002\000\002\056\010\000\002" +
    "\056\010\000\002\056\006\000\002\056\005\000\002\060" +
    "\005\000\002\060\002\000\002\062\003\000\002\062\003" +
    "\000\002\062\003\000\002\041\003\000\002\041\003\000" +
    "\002\041\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u010b\000\026\003\017\004\011\005\022\006\014\007" +
    "\005\010\012\011\007\034\023\035\004\063\021\001\002" +
    "\000\012\011\uffc7\013\uffc7\014\uffc7\027\uffc7\001\002\000" +
    "\004\011\uffec\001\002\000\020\002\uffff\003\u0102\004\011" +
    "\005\022\006\014\007\005\063\u0101\001\002\000\020\012" +
    "\164\030\167\031\161\032\166\033\162\034\023\035\004" +
    "\001\002\000\026\003\ufff3\004\ufff3\005\ufff3\006\ufff3\007" +
    "\ufff3\010\ufff3\011\ufff3\034\ufff3\035\ufff3\063\ufff3\001\002" +
    "\000\004\011\uffed\001\002\000\012\004\011\005\022\006" +
    "\014\007\005\001\002\000\004\011\u0107\001\002\000\006" +
    "\004\u0106\011\uffeb\001\002\000\026\003\017\004\011\005" +
    "\022\006\014\007\005\010\012\011\007\034\023\035\004" +
    "\063\021\001\002\000\004\013\376\001\002\000\006\013" +
    "\274\037\375\001\002\000\004\011\370\001\002\000\006" +
    "\003\032\011\033\001\002\000\010\004\030\005\027\011" +
    "\uffea\001\002\000\012\011\uffc8\013\uffc8\014\uffc8\027\uffc8" +
    "\001\002\000\004\002\026\001\002\000\020\002\ufffd\003" +
    "\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd\063\ufffd\001\002" +
    "\000\004\002\001\001\002\000\006\004\031\011\uffe9\001" +
    "\002\000\004\011\uffe7\001\002\000\004\011\uffe6\001\002" +
    "\000\004\013\367\001\002\000\004\026\034\001\002\000" +
    "\014\004\011\005\022\006\014\007\005\027\ufff8\001\002" +
    "\000\006\014\365\027\ufff6\001\002\000\004\027\ufff9\001" +
    "\002\000\004\027\042\001\002\000\004\011\041\001\002" +
    "\000\006\014\ufff5\027\ufff5\001\002\000\004\036\043\001" +
    "\002\000\054\003\066\004\011\005\022\006\014\007\005" +
    "\010\012\011\057\034\023\035\004\036\043\037\uffa7\051" +
    "\064\053\051\054\073\055\070\060\056\061\074\062\050" +
    "\063\071\064\065\066\046\001\002\000\020\002\ufffb\003" +
    "\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb\063\ufffb\001\002" +
    "\000\062\003\uffa5\004\uffa5\005\uffa5\006\uffa5\007\uffa5\010" +
    "\uffa5\011\uffa5\013\uffa5\034\uffa5\035\uffa5\036\uffa5\037\uffa5" +
    "\051\uffa5\053\uffa5\054\uffa5\055\uffa5\056\uffa5\057\uffa5\060" +
    "\uffa5\061\uffa5\062\uffa5\063\uffa5\064\uffa5\066\uffa5\001\002" +
    "\000\004\013\364\001\002\000\062\003\066\004\011\005" +
    "\022\006\014\007\005\010\012\011\057\013\uffa7\034\023" +
    "\035\004\036\043\037\uffa7\051\064\053\051\054\073\055" +
    "\070\056\uffa7\057\uffa7\060\056\061\074\062\050\063\071" +
    "\064\065\066\046\001\002\000\006\003\354\026\355\001" +
    "\002\000\006\003\320\026\321\001\002\000\062\003\uffa3" +
    "\004\uffa3\005\uffa3\006\uffa3\007\uffa3\010\uffa3\011\uffa3\013" +
    "\uffa3\034\uffa3\035\uffa3\036\uffa3\037\uffa3\051\uffa3\053\uffa3" +
    "\054\uffa3\055\uffa3\056\uffa3\057\uffa3\060\uffa3\061\uffa3\062" +
    "\uffa3\063\uffa3\064\uffa3\066\uffa3\001\002\000\062\003\uffac" +
    "\004\uffac\005\uffac\006\uffac\007\uffac\010\uffac\011\uffac\013" +
    "\uffac\034\uffac\035\uffac\036\uffac\037\uffac\051\uffac\053\uffac" +
    "\054\uffac\055\uffac\056\uffac\057\uffac\060\uffac\061\uffac\062" +
    "\uffac\063\uffac\064\uffac\066\uffac\001\002\000\062\003\uffa4" +
    "\004\uffa4\005\uffa4\006\uffa4\007\uffa4\010\uffa4\011\uffa4\013" +
    "\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4\051\uffa4\053\uffa4" +
    "\054\uffa4\055\uffa4\056\uffa4\057\uffa4\060\uffa4\061\uffa4\062" +
    "\uffa4\063\uffa4\064\uffa4\066\uffa4\001\002\000\062\003\uffab" +
    "\004\uffab\005\uffab\006\uffab\007\uffab\010\uffab\011\uffab\013" +
    "\uffab\034\uffab\035\uffab\036\uffab\037\uffab\051\uffab\053\uffab" +
    "\054\uffab\055\uffab\056\uffab\057\uffab\060\uffab\061\uffab\062" +
    "\uffab\063\uffab\064\uffab\066\uffab\001\002\000\004\013\317" +
    "\001\002\000\022\012\164\026\310\030\167\031\161\032" +
    "\166\033\162\034\023\035\004\001\002\000\062\003\uffa6" +
    "\004\uffa6\005\uffa6\006\uffa6\007\uffa6\010\uffa6\011\uffa6\013" +
    "\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6\051\uffa6\053\uffa6" +
    "\054\uffa6\055\uffa6\056\uffa6\057\uffa6\060\uffa6\061\uffa6\062" +
    "\uffa6\063\uffa6\064\uffa6\066\uffa6\001\002\000\062\003\uffad" +
    "\004\uffad\005\uffad\006\uffad\007\uffad\010\uffad\011\uffad\013" +
    "\uffad\034\uffad\035\uffad\036\uffad\037\uffad\051\uffad\053\uffad" +
    "\054\uffad\055\uffad\056\uffad\057\uffad\060\uffad\061\uffad\062" +
    "\uffad\063\uffad\064\uffad\066\uffad\001\002\000\062\003\uffaa" +
    "\004\uffaa\005\uffaa\006\uffaa\007\uffaa\010\uffaa\011\uffaa\013" +
    "\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa\051\uffaa\053\uffaa" +
    "\054\uffaa\055\uffaa\056\uffaa\057\uffaa\060\uffaa\061\uffaa\062" +
    "\uffaa\063\uffaa\064\uffaa\066\uffaa\001\002\000\004\037\307" +
    "\001\002\000\006\003\277\026\300\001\002\000\016\011" +
    "\137\016\111\017\123\022\112\026\110\050\114\001\002" +
    "\000\004\013\274\001\002\000\004\011\262\001\002\000" +
    "\006\003\234\026\235\001\002\000\004\003\032\001\002" +
    "\000\062\003\uffae\004\uffae\005\uffae\006\uffae\007\uffae\010" +
    "\uffae\011\uffae\013\uffae\034\uffae\035\uffae\036\uffae\037\uffae" +
    "\051\uffae\053\uffae\054\uffae\055\uffae\056\uffae\057\uffae\060" +
    "\uffae\061\uffae\062\uffae\063\uffae\064\uffae\066\uffae\001\002" +
    "\000\006\003\104\026\105\001\002\000\006\003\075\026" +
    "\076\001\002\000\004\013\103\001\002\000\006\011\077" +
    "\027\uff82\001\002\000\004\027\uff83\001\002\000\004\027" +
    "\101\001\002\000\004\013\102\001\002\000\062\003\uff85" +
    "\004\uff85\005\uff85\006\uff85\007\uff85\010\uff85\011\uff85\013" +
    "\uff85\034\uff85\035\uff85\036\uff85\037\uff85\051\uff85\053\uff85" +
    "\054\uff85\055\uff85\056\uff85\057\uff85\060\uff85\061\uff85\062" +
    "\uff85\063\uff85\064\uff85\066\uff85\001\002\000\062\003\uff84" +
    "\004\uff84\005\uff84\006\uff84\007\uff84\010\uff84\011\uff84\013" +
    "\uff84\034\uff84\035\uff84\036\uff84\037\uff84\051\uff84\053\uff84" +
    "\054\uff84\055\uff84\056\uff84\057\uff84\060\uff84\061\uff84\062" +
    "\uff84\063\uff84\064\uff84\066\uff84\001\002\000\004\037\233" +
    "\001\002\000\024\003\117\011\113\016\111\017\123\022" +
    "\112\026\110\034\023\035\004\050\114\001\002\000\014" +
    "\013\uffc0\014\uffc0\027\uffc0\046\uffc0\047\uffc0\001\002\000" +
    "\016\021\176\022\173\023\177\024\200\025\175\027\uff78" +
    "\001\002\000\016\011\137\016\111\017\123\022\112\026" +
    "\110\050\114\001\002\000\042\013\uffd3\014\uffd3\021\uffd3" +
    "\022\uffd3\023\uffd3\024\uffd3\025\uffd3\027\uffd3\040\uffd3\041" +
    "\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3" +
    "\001\002\000\004\016\232\001\002\000\052\012\164\021" +
    "\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026\140\027\uffd0" +
    "\030\167\031\161\032\166\033\162\034\023\035\004\040" +
    "\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0\001\002" +
    "\000\014\011\uffb1\016\uffb1\017\uffb1\022\uffb1\026\uffb1\001" +
    "\002\000\014\011\137\016\111\017\123\022\112\026\220" +
    "\001\002\000\004\027\uff76\001\002\000\004\027\216\001" +
    "\002\000\014\013\uffbc\014\uffbc\027\uffbc\046\uffbc\047\uffbc" +
    "\001\002\000\010\027\uff77\046\152\047\151\001\002\000" +
    "\004\027\213\001\002\000\042\013\uffd1\014\uffd1\021\uffd1" +
    "\022\uffd1\023\uffd1\024\uffd1\025\uffd1\027\uffd1\040\uffd1\041" +
    "\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1" +
    "\001\002\000\014\013\uffbe\014\uffbe\027\uffbe\046\uffbe\047" +
    "\uffbe\001\002\000\036\013\uffd4\014\uffd4\021\uffd4\022\uffd4" +
    "\023\uffd4\024\uffd4\025\uffd4\027\uffd4\040\130\041\135\042" +
    "\131\043\134\044\127\045\132\001\002\000\022\013\uffd6" +
    "\014\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\027" +
    "\uffd6\001\002\000\012\011\uffb5\016\uffb5\017\uffb5\022\uffb5" +
    "\001\002\000\012\011\uffb9\016\uffb9\017\uffb9\022\uffb9\001" +
    "\002\000\012\011\uffb7\016\uffb7\017\uffb7\022\uffb7\001\002" +
    "\000\012\011\uffb4\016\uffb4\017\uffb4\022\uffb4\001\002\000" +
    "\012\011\137\016\111\017\123\022\112\001\002\000\012" +
    "\011\uffb6\016\uffb6\017\uffb6\022\uffb6\001\002\000\012\011" +
    "\uffb8\016\uffb8\017\uffb8\022\uffb8\001\002\000\014\013\uffbb" +
    "\014\uffbb\027\uffbb\046\uffbb\047\uffbb\001\002\000\044\013" +
    "\uffd0\014\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0" +
    "\026\140\027\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044" +
    "\uffd0\045\uffd0\046\uffd0\047\uffd0\001\002\000\024\011\144" +
    "\016\111\017\123\022\112\026\110\027\146\034\023\035" +
    "\004\050\114\001\002\000\006\014\206\027\uff7c\001\002" +
    "\000\006\014\uff79\027\uff79\001\002\000\020\014\uff7b\021" +
    "\176\022\173\023\177\024\200\025\175\027\uff7b\001\002" +
    "\000\054\012\164\014\uffd0\021\uffd0\022\uffd0\023\uffd0\024" +
    "\uffd0\025\uffd0\026\140\027\uffd0\030\167\031\161\032\166" +
    "\033\162\034\023\035\004\040\uffd0\041\uffd0\042\uffd0\043" +
    "\uffd0\044\uffd0\045\uffd0\001\002\000\004\011\160\001\002" +
    "\000\042\013\uffce\014\uffce\021\uffce\022\uffce\023\uffce\024" +
    "\uffce\025\uffce\027\uffce\040\uffce\041\uffce\042\uffce\043\uffce" +
    "\044\uffce\045\uffce\046\uffce\047\uffce\001\002\000\012\014" +
    "\uff7a\027\uff7a\046\152\047\151\001\002\000\016\011\137" +
    "\016\111\017\123\022\112\026\155\050\114\001\002\000" +
    "\016\011\uffb2\016\uffb2\017\uffb2\022\uffb2\026\uffb2\050\uffb2" +
    "\001\002\000\016\011\uffb3\016\uffb3\017\uffb3\022\uffb3\026" +
    "\uffb3\050\uffb3\001\002\000\016\040\130\041\135\042\131" +
    "\043\134\044\127\045\132\001\002\000\014\013\uffc1\014" +
    "\uffc1\027\uffc1\046\uffc1\047\uffc1\001\002\000\016\011\137" +
    "\016\111\017\123\022\112\026\155\050\114\001\002\000" +
    "\010\027\157\046\152\047\151\001\002\000\014\013\uffbf" +
    "\014\uffbf\027\uffbf\046\uffbf\047\uffbf\001\002\000\006\014" +
    "\uffd9\027\uffd9\001\002\000\016\011\uffc4\016\uffc4\017\uffc4" +
    "\022\uffc4\026\uffc4\050\uffc4\001\002\000\016\011\uffc2\016" +
    "\uffc2\017\uffc2\022\uffc2\026\uffc2\050\uffc2\001\002\000\016" +
    "\011\137\016\111\017\123\022\112\026\110\050\114\001" +
    "\002\000\016\011\uffc6\016\uffc6\017\uffc6\022\uffc6\026\uffc6" +
    "\050\uffc6\001\002\000\006\014\uffd8\027\uffd8\001\002\000" +
    "\016\011\uffc3\016\uffc3\017\uffc3\022\uffc3\026\uffc3\050\uffc3" +
    "\001\002\000\016\011\uffc5\016\uffc5\017\uffc5\022\uffc5\026" +
    "\uffc5\050\uffc5\001\002\000\006\014\uffda\027\uffda\001\002" +
    "\000\014\013\uffe2\014\uffe2\027\uffe2\046\152\047\151\001" +
    "\002\000\022\013\uffe3\014\uffe3\021\176\022\173\023\177" +
    "\024\200\025\175\027\uffe3\001\002\000\014\011\uffcc\016" +
    "\uffcc\017\uffcc\022\uffcc\026\uffcc\001\002\000\014\011\137" +
    "\016\111\017\123\022\112\026\203\001\002\000\014\011" +
    "\uffc9\016\uffc9\017\uffc9\022\uffc9\026\uffc9\001\002\000\014" +
    "\011\uffcd\016\uffcd\017\uffcd\022\uffcd\026\uffcd\001\002\000" +
    "\014\011\uffca\016\uffca\017\uffca\022\uffca\026\uffca\001\002" +
    "\000\014\011\uffcb\016\uffcb\017\uffcb\022\uffcb\026\uffcb\001" +
    "\002\000\022\013\uffd4\014\uffd4\021\uffd4\022\uffd4\023\uffd4" +
    "\024\uffd4\025\uffd4\027\uffd4\001\002\000\022\013\uffd7\014" +
    "\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\027\uffd7" +
    "\001\002\000\014\011\137\016\111\017\123\022\112\026" +
    "\203\001\002\000\016\021\176\022\173\023\177\024\200" +
    "\025\175\027\205\001\002\000\022\013\uffd5\014\uffd5\021" +
    "\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\027\uffd5\001\002" +
    "\000\022\011\144\016\111\017\123\022\112\026\110\034" +
    "\023\035\004\050\114\001\002\000\004\027\210\001\002" +
    "\000\042\013\uffcf\014\uffcf\021\uffcf\022\uffcf\023\uffcf\024" +
    "\uffcf\025\uffcf\027\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf" +
    "\044\uffcf\045\uffcf\046\uffcf\047\uffcf\001\002\000\006\014" +
    "\206\027\uff7c\001\002\000\004\027\uff7d\001\002\000\006" +
    "\013\214\036\043\001\002\000\062\003\uff92\004\uff92\005" +
    "\uff92\006\uff92\007\uff92\010\uff92\011\uff92\013\uff92\034\uff92" +
    "\035\uff92\036\uff92\037\uff92\051\uff92\053\uff92\054\uff92\055" +
    "\uff92\056\uff92\057\uff92\060\uff92\061\uff92\062\uff92\063\uff92" +
    "\064\uff92\066\uff92\001\002\000\062\003\uff93\004\uff93\005" +
    "\uff93\006\uff93\007\uff93\010\uff93\011\uff93\013\uff93\034\uff93" +
    "\035\uff93\036\uff93\037\uff93\051\uff93\053\uff93\054\uff93\055" +
    "\uff93\056\uff93\057\uff93\060\uff93\061\uff93\062\uff93\063\uff93" +
    "\064\uff93\066\uff93\001\002\000\062\003\uff90\004\uff90\005" +
    "\uff90\006\uff90\007\uff90\010\uff90\011\uff90\013\uff90\034\uff90" +
    "\035\uff90\036\uff90\037\uff90\051\uff90\053\uff90\054\uff90\055" +
    "\uff90\056\uff90\057\uff90\060\uff90\061\uff90\062\uff90\063\uff90" +
    "\064\uff90\066\uff90\001\002\000\014\013\uffba\014\uffba\027" +
    "\uffba\046\uffba\047\uffba\001\002\000\016\011\137\016\111" +
    "\017\123\022\112\026\155\050\114\001\002\000\010\027" +
    "\222\046\152\047\151\001\002\000\014\013\uffbd\014\uffbd" +
    "\027\uffbd\046\uffbd\047\uffbd\001\002\000\016\011\137\016" +
    "\111\017\123\022\112\026\110\050\114\001\002\000\010" +
    "\013\uffdb\014\225\027\uffdb\001\002\000\010\011\007\034" +
    "\023\035\004\001\002\000\006\013\uffdd\027\uffdd\001\002" +
    "\000\006\013\uffdc\027\uffdc\001\002\000\010\013\uffdb\014" +
    "\225\027\uffdb\001\002\000\006\013\uffdf\027\uffdf\001\002" +
    "\000\042\013\uffd2\014\uffd2\021\uffd2\022\uffd2\023\uffd2\024" +
    "\uffd2\025\uffd2\027\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2" +
    "\044\uffd2\045\uffd2\046\uffd2\047\uffd2\001\002\000\062\003" +
    "\uff91\004\uff91\005\uff91\006\uff91\007\uff91\010\uff91\011\uff91" +
    "\013\uff91\034\uff91\035\uff91\036\uff91\037\uff91\051\uff91\053" +
    "\uff91\054\uff91\055\uff91\056\uff91\057\uff91\060\uff91\061\uff91" +
    "\062\uff91\063\uff91\064\uff91\066\uff91\001\002\000\004\037" +
    "\261\001\002\000\014\011\137\016\111\017\123\022\112" +
    "\026\203\001\002\000\016\021\176\022\173\023\177\024" +
    "\200\025\175\027\237\001\002\000\004\036\240\001\002" +
    "\000\010\037\uff8b\056\241\057\uff8b\001\002\000\004\016" +
    "\255\001\002\000\010\037\uff8b\056\241\057\uff8b\001\002" +
    "\000\006\037\uff88\057\246\001\002\000\004\037\245\001" +
    "\002\000\062\003\uff8f\004\uff8f\005\uff8f\006\uff8f\007\uff8f" +
    "\010\uff8f\011\uff8f\013\uff8f\034\uff8f\035\uff8f\036\uff8f\037" +
    "\uff8f\051\uff8f\053\uff8f\054\uff8f\055\uff8f\056\uff8f\057\uff8f" +
    "\060\uff8f\061\uff8f\062\uff8f\063\uff8f\064\uff8f\066\uff8f\001" +
    "\002\000\004\015\250\001\002\000\004\037\uff8d\001\002" +
    "\000\056\003\066\004\011\005\022\006\014\007\005\010" +
    "\012\011\057\013\uffa7\034\023\035\004\036\043\037\uffa7" +
    "\051\064\053\051\054\073\055\070\060\056\061\074\062" +
    "\050\063\071\064\065\066\046\001\002\000\006\013\253" +
    "\037\uff86\001\002\000\004\037\uff89\001\002\000\010\037" +
    "\uff87\056\uff87\057\uff87\001\002\000\006\037\uff8c\057\uff8c" +
    "\001\002\000\004\015\256\001\002\000\062\003\066\004" +
    "\011\005\022\006\014\007\005\010\012\011\057\013\uffa7" +
    "\034\023\035\004\036\043\037\uffa7\051\064\053\051\054" +
    "\073\055\070\056\uffa7\057\uffa7\060\056\061\074\062\050" +
    "\063\071\064\065\066\046\001\002\000\012\013\253\037" +
    "\uff86\056\uff86\057\uff86\001\002\000\010\037\uff8a\056\uff8a" +
    "\057\uff8a\001\002\000\062\003\uff8e\004\uff8e\005\uff8e\006" +
    "\uff8e\007\uff8e\010\uff8e\011\uff8e\013\uff8e\034\uff8e\035\uff8e" +
    "\036\uff8e\037\uff8e\051\uff8e\053\uff8e\054\uff8e\055\uff8e\056" +
    "\uff8e\057\uff8e\060\uff8e\061\uff8e\062\uff8e\063\uff8e\064\uff8e" +
    "\066\uff8e\001\002\000\010\012\264\013\uffe4\014\uffe4\001" +
    "\002\000\006\013\uffe0\014\266\001\002\000\016\011\137" +
    "\016\111\017\123\022\112\026\110\050\114\001\002\000" +
    "\006\013\uffe5\014\uffe5\001\002\000\004\011\271\001\002" +
    "\000\004\013\270\001\002\000\062\003\ufff2\004\ufff2\005" +
    "\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\013\ufff2\034\ufff2" +
    "\035\ufff2\036\ufff2\037\ufff2\051\ufff2\053\ufff2\054\ufff2\055" +
    "\ufff2\056\ufff2\057\ufff2\060\ufff2\061\ufff2\062\ufff2\063\ufff2" +
    "\064\ufff2\066\ufff2\001\002\000\010\012\264\013\uffe4\014" +
    "\uffe4\001\002\000\006\013\uffe0\014\266\001\002\000\004" +
    "\013\uffe1\001\002\000\062\003\uffef\004\uffef\005\uffef\006" +
    "\uffef\007\uffef\010\uffef\011\uffef\013\uffef\034\uffef\035\uffef" +
    "\036\uffef\037\uffef\051\uffef\053\uffef\054\uffef\055\uffef\056" +
    "\uffef\057\uffef\060\uffef\061\uffef\062\uffef\063\uffef\064\uffef" +
    "\066\uffef\001\002\000\004\013\276\001\002\000\062\003" +
    "\uffa2\004\uffa2\005\uffa2\006\uffa2\007\uffa2\010\uffa2\011\uffa2" +
    "\013\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2\051\uffa2\053" +
    "\uffa2\054\uffa2\055\uffa2\056\uffa2\057\uffa2\060\uffa2\061\uffa2" +
    "\062\uffa2\063\uffa2\064\uffa2\066\uffa2\001\002\000\004\037" +
    "\306\001\002\000\022\011\113\016\111\017\123\022\112" +
    "\026\110\034\023\035\004\050\114\001\002\000\004\027" +
    "\302\001\002\000\004\036\043\001\002\000\064\003\uff9f" +
    "\004\uff9f\005\uff9f\006\uff9f\007\uff9f\010\uff9f\011\uff9f\013" +
    "\uff9f\034\uff9f\035\uff9f\036\uff9f\037\uff9f\051\uff9f\052\304" +
    "\053\uff9f\054\uff9f\055\uff9f\056\uff9f\057\uff9f\060\uff9f\061" +
    "\uff9f\062\uff9f\063\uff9f\064\uff9f\066\uff9f\001\002\000\004" +
    "\036\043\001\002\000\062\003\uff9e\004\uff9e\005\uff9e\006" +
    "\uff9e\007\uff9e\010\uff9e\011\uff9e\013\uff9e\034\uff9e\035\uff9e" +
    "\036\uff9e\037\uff9e\051\uff9e\053\uff9e\054\uff9e\055\uff9e\056" +
    "\uff9e\057\uff9e\060\uff9e\061\uff9e\062\uff9e\063\uff9e\064\uff9e" +
    "\066\uff9e\001\002\000\062\003\uff9d\004\uff9d\005\uff9d\006" +
    "\uff9d\007\uff9d\010\uff9d\011\uff9d\013\uff9d\034\uff9d\035\uff9d" +
    "\036\uff9d\037\uff9d\051\uff9d\053\uff9d\054\uff9d\055\uff9d\056" +
    "\uff9d\057\uff9d\060\uff9d\061\uff9d\062\uff9d\063\uff9d\064\uff9d" +
    "\066\uff9d\001\002\000\066\002\uffa9\003\uffa9\004\uffa9\005" +
    "\uffa9\006\uffa9\007\uffa9\010\uffa9\011\uffa9\013\uffa9\034\uffa9" +
    "\035\uffa9\036\uffa9\037\uffa9\051\uffa9\052\uffa9\053\uffa9\054" +
    "\uffa9\055\uffa9\056\uffa9\057\uffa9\060\uffa9\061\uffa9\062\uffa9" +
    "\063\uffa9\064\uffa9\066\uffa9\001\002\000\024\011\144\016" +
    "\111\017\123\022\112\026\110\027\312\034\023\035\004" +
    "\050\114\001\002\000\006\014\206\027\uff7c\001\002\000" +
    "\004\013\313\001\002\000\062\003\uff7f\004\uff7f\005\uff7f" +
    "\006\uff7f\007\uff7f\010\uff7f\011\uff7f\013\uff7f\034\uff7f\035" +
    "\uff7f\036\uff7f\037\uff7f\051\uff7f\053\uff7f\054\uff7f\055\uff7f" +
    "\056\uff7f\057\uff7f\060\uff7f\061\uff7f\062\uff7f\063\uff7f\064" +
    "\uff7f\066\uff7f\001\002\000\004\027\315\001\002\000\004" +
    "\013\316\001\002\000\062\003\uff80\004\uff80\005\uff80\006" +
    "\uff80\007\uff80\010\uff80\011\uff80\013\uff80\034\uff80\035\uff80" +
    "\036\uff80\037\uff80\051\uff80\053\uff80\054\uff80\055\uff80\056" +
    "\uff80\057\uff80\060\uff80\061\uff80\062\uff80\063\uff80\064\uff80" +
    "\066\uff80\001\002\000\062\003\uffa1\004\uffa1\005\uffa1\006" +
    "\uffa1\007\uffa1\010\uffa1\011\uffa1\013\uffa1\034\uffa1\035\uffa1" +
    "\036\uffa1\037\uffa1\051\uffa1\053\uffa1\054\uffa1\055\uffa1\056" +
    "\uffa1\057\uffa1\060\uffa1\061\uffa1\062\uffa1\063\uffa1\064\uffa1" +
    "\066\uffa1\001\002\000\004\037\353\001\002\000\022\004" +
    "\011\005\022\006\014\007\005\011\007\013\322\034\023" +
    "\035\004\001\002\000\022\003\uff94\011\uff94\013\uff94\016" +
    "\uff94\017\uff94\022\uff94\026\uff94\050\uff94\001\002\000\022" +
    "\003\334\011\137\013\333\016\111\017\123\022\112\026" +
    "\155\050\114\001\002\000\004\013\332\001\002\000\004" +
    "\011\326\001\002\000\010\012\264\013\uffe4\014\uffe4\001" +
    "\002\000\006\013\uffe0\014\266\001\002\000\004\013\331" +
    "\001\002\000\022\003\uff96\011\uff96\013\uff96\016\uff96\017" +
    "\uff96\022\uff96\026\uff96\050\uff96\001\002\000\022\003\uff95" +
    "\011\uff95\013\uff95\016\uff95\017\uff95\022\uff95\026\uff95\050" +
    "\uff95\001\002\000\024\011\113\016\111\017\123\022\112" +
    "\026\110\027\346\034\023\035\004\050\114\001\002\000" +
    "\004\027\344\001\002\000\010\013\336\046\152\047\151" +
    "\001\002\000\024\011\113\016\111\017\123\022\112\026" +
    "\110\027\337\034\023\035\004\050\114\001\002\000\004" +
    "\036\043\001\002\000\004\027\341\001\002\000\004\036" +
    "\043\001\002\000\062\003\uff9c\004\uff9c\005\uff9c\006\uff9c" +
    "\007\uff9c\010\uff9c\011\uff9c\013\uff9c\034\uff9c\035\uff9c\036" +
    "\uff9c\037\uff9c\051\uff9c\053\uff9c\054\uff9c\055\uff9c\056\uff9c" +
    "\057\uff9c\060\uff9c\061\uff9c\062\uff9c\063\uff9c\064\uff9c\066" +
    "\uff9c\001\002\000\062\003\uff9a\004\uff9a\005\uff9a\006\uff9a" +
    "\007\uff9a\010\uff9a\011\uff9a\013\uff9a\034\uff9a\035\uff9a\036" +
    "\uff9a\037\uff9a\051\uff9a\053\uff9a\054\uff9a\055\uff9a\056\uff9a" +
    "\057\uff9a\060\uff9a\061\uff9a\062\uff9a\063\uff9a\064\uff9a\066" +
    "\uff9a\001\002\000\004\036\043\001\002\000\062\003\uff97" +
    "\004\uff97\005\uff97\006\uff97\007\uff97\010\uff97\011\uff97\013" +
    "\uff97\034\uff97\035\uff97\036\uff97\037\uff97\051\uff97\053\uff97" +
    "\054\uff97\055\uff97\056\uff97\057\uff97\060\uff97\061\uff97\062" +
    "\uff97\063\uff97\064\uff97\066\uff97\001\002\000\004\036\043" +
    "\001\002\000\004\027\350\001\002\000\004\036\043\001" +
    "\002\000\062\003\uff9b\004\uff9b\005\uff9b\006\uff9b\007\uff9b" +
    "\010\uff9b\011\uff9b\013\uff9b\034\uff9b\035\uff9b\036\uff9b\037" +
    "\uff9b\051\uff9b\053\uff9b\054\uff9b\055\uff9b\056\uff9b\057\uff9b" +
    "\060\uff9b\061\uff9b\062\uff9b\063\uff9b\064\uff9b\066\uff9b\001" +
    "\002\000\062\003\uff99\004\uff99\005\uff99\006\uff99\007\uff99" +
    "\010\uff99\011\uff99\013\uff99\034\uff99\035\uff99\036\uff99\037" +
    "\uff99\051\uff99\053\uff99\054\uff99\055\uff99\056\uff99\057\uff99" +
    "\060\uff99\061\uff99\062\uff99\063\uff99\064\uff99\066\uff99\001" +
    "\002\000\062\003\uff98\004\uff98\005\uff98\006\uff98\007\uff98" +
    "\010\uff98\011\uff98\013\uff98\034\uff98\035\uff98\036\uff98\037" +
    "\uff98\051\uff98\053\uff98\054\uff98\055\uff98\056\uff98\057\uff98" +
    "\060\uff98\061\uff98\062\uff98\063\uff98\064\uff98\066\uff98\001" +
    "\002\000\004\013\362\001\002\000\022\011\144\016\111" +
    "\017\123\022\112\026\110\034\023\035\004\050\114\001" +
    "\002\000\006\014\206\027\uff7c\001\002\000\004\027\360" +
    "\001\002\000\004\013\361\001\002\000\062\003\uff81\004" +
    "\uff81\005\uff81\006\uff81\007\uff81\010\uff81\011\uff81\013\uff81" +
    "\034\uff81\035\uff81\036\uff81\037\uff81\051\uff81\053\uff81\054" +
    "\uff81\055\uff81\056\uff81\057\uff81\060\uff81\061\uff81\062\uff81" +
    "\063\uff81\064\uff81\066\uff81\001\002\000\062\003\uff7e\004" +
    "\uff7e\005\uff7e\006\uff7e\007\uff7e\010\uff7e\011\uff7e\013\uff7e" +
    "\034\uff7e\035\uff7e\036\uff7e\037\uff7e\051\uff7e\053\uff7e\054" +
    "\uff7e\055\uff7e\056\uff7e\057\uff7e\060\uff7e\061\uff7e\062\uff7e" +
    "\063\uff7e\064\uff7e\066\uff7e\001\002\000\012\013\uffa8\037" +
    "\uffa8\056\uffa8\057\uffa8\001\002\000\062\003\uffa0\004\uffa0" +
    "\005\uffa0\006\uffa0\007\uffa0\010\uffa0\011\uffa0\013\uffa0\034" +
    "\uffa0\035\uffa0\036\uffa0\037\uffa0\051\uffa0\053\uffa0\054\uffa0" +
    "\055\uffa0\056\uffa0\057\uffa0\060\uffa0\061\uffa0\062\uffa0\063" +
    "\uffa0\064\uffa0\066\uffa0\001\002\000\012\004\011\005\022" +
    "\006\014\007\005\001\002\000\004\027\ufff7\001\002\000" +
    "\062\003\uffee\004\uffee\005\uffee\006\uffee\007\uffee\010\uffee" +
    "\011\uffee\013\uffee\034\uffee\035\uffee\036\uffee\037\uffee\051" +
    "\uffee\053\uffee\054\uffee\055\uffee\056\uffee\057\uffee\060\uffee" +
    "\061\uffee\062\uffee\063\uffee\064\uffee\066\uffee\001\002\000" +
    "\012\012\264\013\uffe4\014\uffe4\026\371\001\002\000\014" +
    "\004\011\005\022\006\014\007\005\027\ufff8\001\002\000" +
    "\004\027\373\001\002\000\004\036\043\001\002\000\020" +
    "\002\ufffc\003\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc\063" +
    "\ufffc\001\002\000\020\002\ufffa\003\ufffa\004\ufffa\005\ufffa" +
    "\006\ufffa\007\ufffa\063\ufffa\001\002\000\062\003\ufff0\004" +
    "\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0\013\ufff0" +
    "\034\ufff0\035\ufff0\036\ufff0\037\ufff0\051\ufff0\053\ufff0\054" +
    "\ufff0\055\ufff0\056\ufff0\057\ufff0\060\ufff0\061\ufff0\062\ufff0" +
    "\063\ufff0\064\ufff0\066\ufff0\001\002\000\020\002\000\003" +
    "\u0102\004\011\005\022\006\014\007\005\063\u0101\001\002" +
    "\000\026\003\ufff4\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010" +
    "\ufff4\011\ufff4\034\ufff4\035\ufff4\063\ufff4\001\002\000\004" +
    "\011\033\001\002\000\004\037\375\001\002\000\020\002" +
    "\ufffe\003\ufffe\004\ufffe\005\ufffe\006\ufffe\007\ufffe\063\ufffe" +
    "\001\002\000\004\011\u0105\001\002\000\004\026\371\001" +
    "\002\000\004\011\uffe8\001\002\000\010\013\uffdb\014\225" +
    "\027\uffdb\001\002\000\006\013\uffde\027\uffde\001\002\000" +
    "\004\011\u010a\001\002\000\010\012\264\013\uffe4\014\uffe4" +
    "\001\002\000\006\013\uffe0\014\266\001\002\000\004\013" +
    "\u010d\001\002\000\062\003\ufff1\004\ufff1\005\ufff1\006\ufff1" +
    "\007\ufff1\010\ufff1\011\ufff1\013\ufff1\034\ufff1\035\ufff1\036" +
    "\ufff1\037\ufff1\051\ufff1\053\ufff1\054\ufff1\055\ufff1\056\ufff1" +
    "\057\ufff1\060\ufff1\061\ufff1\062\ufff1\063\ufff1\064\ufff1\066" +
    "\ufff1\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u010b\000\022\002\023\003\005\004\024\010\014\011" +
    "\007\012\017\017\015\025\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\u0102\012\u0103\001\001\000" +
    "\006\024\222\025\223\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\u0108\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\003\376\004\024\011\377\012\017" +
    "\017\015\025\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\005" +
    "\035\006\034\007\036\012\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\037\043\001\001\000\036\011\057" +
    "\012\066\017\015\025\012\036\044\037\060\040\071\042" +
    "\052\044\046\045\062\046\061\047\054\055\053\056\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\011\057\012\066\017\015\025\012\036\044" +
    "\037\060\040\071\042\052\044\046\045\362\046\061\047" +
    "\054\055\053\056\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\024\222" +
    "\025\223\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\014\274\015\124\021\171\022\125\026\170\027\105\030" +
    "\117\031\123\034\114\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\057\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\015\124\017\115\021\106\022" +
    "\125\025\012\026\120\027\105\030\117\031\123\034\114" +
    "\041\121\001\001\000\002\001\001\000\004\023\173\001" +
    "\001\000\022\015\124\021\203\022\125\026\155\027\105" +
    "\030\117\031\123\034\114\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\024\222\025\223\001\001\000\002" +
    "\001\001\000\004\015\216\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\147\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\132\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\135\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\015\124\021" +
    "\142\022\125\025\144\026\146\027\105\030\117\031\123" +
    "\034\114\061\141\062\140\001\001\000\004\060\206\001" +
    "\001\000\002\001\001\000\004\023\173\001\001\000\006" +
    "\024\162\025\164\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\147\001\001\000\014\015\152\027\153" +
    "\030\117\031\123\034\114\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\132\001\001\000\002\001\001" +
    "\000\016\015\152\026\155\027\105\030\117\031\123\034" +
    "\114\001\001\000\004\033\147\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\014\167\015\124\021\171\022\125\026\170\027\105" +
    "\030\117\031\123\034\114\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\033\147\001\001\000\004\023\173\001" +
    "\001\000\002\001\001\000\006\015\200\022\201\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\015\200\021\203\022\125\001\001\000\004\023\173\001" +
    "\001\000\002\001\001\000\030\015\124\021\142\022\125" +
    "\025\144\026\146\027\105\030\117\031\123\034\114\061" +
    "\141\062\210\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\060\211\001\001\000\002\001\001\000\004\037" +
    "\214\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\015\152\026\220\027" +
    "\105\030\117\031\123\034\114\001\001\000\004\033\147" +
    "\001\001\000\002\001\001\000\024\014\227\015\124\021" +
    "\171\022\125\026\170\027\105\030\117\031\123\034\114" +
    "\001\001\000\004\020\225\001\001\000\006\017\226\025" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\230\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\015\200\021\235" +
    "\022\125\001\001\000\004\023\173\001\001\000\002\001" +
    "\001\000\010\050\243\051\242\052\241\001\001\000\002" +
    "\001\001\000\006\051\253\052\241\001\001\000\004\054" +
    "\246\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\011\057\012\066\017" +
    "\015\025\012\036\044\037\060\040\071\042\052\044\046" +
    "\045\250\046\061\047\054\055\053\056\051\001\001\000" +
    "\004\053\251\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\011\057\012" +
    "\066\017\015\025\012\036\044\037\060\040\071\042\052" +
    "\044\046\045\256\046\061\047\054\055\053\056\051\001" +
    "\001\000\004\053\257\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\262\001\001\000\004\016\266\001" +
    "\001\000\024\014\264\015\124\021\171\022\125\026\170" +
    "\027\105\030\117\031\123\034\114\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\271\001\001\000\004\016\272\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\015\124\017\115\021" +
    "\106\022\125\025\012\026\120\027\105\030\117\031\123" +
    "\034\114\041\300\001\001\000\002\001\001\000\004\037" +
    "\302\001\001\000\002\001\001\000\004\037\304\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\015\124\021\142\022\125\025\144\026\146\027\105" +
    "\030\117\031\123\034\114\061\141\062\310\001\001\000" +
    "\004\060\313\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\012\324\017\323" +
    "\025\012\043\322\001\001\000\002\001\001\000\016\015" +
    "\152\026\334\027\105\030\117\031\123\034\114\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\326\001" +
    "\001\000\004\016\327\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\015\124\017\115\021" +
    "\106\022\125\025\012\026\120\027\105\030\117\031\123" +
    "\034\114\041\346\001\001\000\002\001\001\000\004\033" +
    "\147\001\001\000\030\015\124\017\115\021\106\022\125" +
    "\025\012\026\120\027\105\030\117\031\123\034\114\041" +
    "\337\001\001\000\004\037\342\001\001\000\002\001\001" +
    "\000\004\037\341\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\037\344\001\001\000\002\001\001\000\004" +
    "\037\351\001\001\000\002\001\001\000\004\037\350\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\015\124\021\142\022\125\025" +
    "\144\026\146\027\105\030\117\031\123\034\114\061\141" +
    "\062\355\001\001\000\004\060\356\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\005\365\006" +
    "\034\012\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\262\001\001\000\012\005\035\006\034\007" +
    "\371\012\037\001\001\000\002\001\001\000\004\037\373" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\u0102\012\u0103\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\u0107\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\u010a\001\001\000\004\016\u010b\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    private String errorMessage = "";    
    private String errorMsjSeman = "";
    private javax.swing.JTextArea txtErroresSintaxis;  // Campo de la interfaz
    public TablaSimbolos tablaSimbolos = new TablaSimbolos();
    public boolean esGlobal = true; 
    public PilaSemantica pilaSemantica = new PilaSemantica();
    public PilaSemantica pilaSemanticaAux = new PilaSemantica();
    public Generador generador = new Generador();
    public String traduccion = "";
    // Tipo de variable para las declaraciones seguidas


    // Constructor que recibe el campo de la interfaz
    public Sintax(javax.swing.JTextArea txtErroresSintaxis) {
        this.txtErroresSintaxis = txtErroresSintaxis;
    }

    public void msjErrorSemantico(String mensaje, Symbol s){
        errorMsjSeman += "Error Semantico en la linea " + (s.right+1) + " columna " + (s.left+1) + ", " + mensaje + "\n";
        System.err.println("Error Semantico" + s.value +" Linea "+(s.right+1)+" columna "+(s.left+1));

    }

    public void mensajeDeError(String mensaje){
        errorMessage += "Error R de sintaxis en la linea " + (s.right+1) + " columna " + (s.left+1) + ", " + mensaje;
        System.err.println("Error R de sintaxis: token" + s.value +" Linea "+(s.right+1)+" columna "+(s.left+1));

        String tokenValue = s.value != null ? s.value.toString() : "símbolo desconocido";

        // Personalizar el mensaje de error según el valor del símbolo
        switch (tokenValue) {
            case "{":
                this.errorMessage += ": Se esperaba ‘=’, ‘,’, ‘;’ o ‘(atributos)’ antes del token ‘{’ \n";
                break;
            default:
                this.errorMessage += ": Token inesperado ‘" + tokenValue + "’ \n";
        }
    }
    public void syntax_error(Symbol s) {
        this.s = s;
        /*
        String tokenValue = s.value != null ? s.value.toString() : "símbolo desconocido";

        // Personalizar el mensaje de error según el valor del símbolo
        switch (tokenValue) {
            case "{":
                this.errorMessage += ": Se esperaba ‘=’, ‘,’, ‘;’ o ‘(atributos)’ antes del token ‘{’ \n";
                break;
            default:
                this.errorMessage += ": Token inesperado ‘" + tokenValue + "’ \n";
        }
        */
        
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        this.s = s;
        errorMessage += "Error NR de sintaxis: token "+ s.value +" Linea "+(s.right+1)+" columna "+(s.left+1) + "\n";
        System.err.println("Error NR de sintaxis: token " + s.value +" Linea "+(s.right+1)+" columna "+(s.left+1));
    }

    public String getErrorMessage() {
        return this.errorMessage;
    }

    public String getSemanErrors() {
        return this.errorMsjSeman;
    }

    public Symbol getS(){
        return this.s;
    }

    public String getTablaSimbolos(){
        return tablaSimbolos.getTablaSimStr();
    }

    public PilaSemantica getPilaSemantica(){
        return pilaSemantica;
    }

    public String getTraduccion(){
        return traduccion;
    }

    public void addTraduccion(String codigoTraducido){
        traduccion += codigoTraducido;
    }

    public void addListaVariables(PilaSemantica pilaAux){
        int size = pilaAux.size();
        String variable = "";
        for(int i = 0; i < size; i++){
            variable = pilaAux.pop_init();
            pilaSemantica.push_end(variable);
        }
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // EXPRESIONES ::= VARIABLE_DEC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // EXPRESIONES ::= EXP_BOOLEANA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // EXPRESIONES ::= EXP_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // EXP_FUNC_WRITE ::= VARIABLE_DEC_SIMPLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_FUNC_WRITE",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // EXP_FUNC_WRITE ::= EXP_BOOLEANA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_FUNC_WRITE",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // EXP_FUNC_WRITE ::= EXP_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_FUNC_WRITE",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // PARAMS_WRITE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMS_WRITE",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // PARAMS_WRITE ::= Coma EXP_FUNC_WRITE PARAMS_WRITE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMS_WRITE",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // FUNC_WRITE ::= Write error PuntoYComa 
            {
              Object RESULT =null;
		
            String mensaje = "Error en funcion write";
            parser.mensajeDeError(mensaje);
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_WRITE",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // FUNC_WRITE ::= Identificador P_Abierto P_Cerrado PuntoYComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_WRITE",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // FUNC_WRITE ::= Identificador P_Abierto EXP_FUNC_WRITE PARAMS_WRITE P_Cerrado PuntoYComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_WRITE",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // FUNC_WRITE ::= Write P_Abierto EXP_FUNC_WRITE PARAMS_WRITE P_Cerrado PuntoYComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_WRITE",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // PARAM_READ ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_READ",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // PARAM_READ ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_READ",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // FUNC_READ ::= Read error PuntoYComa 
            {
              Object RESULT =null;
		
            String mensaje = "Error en funcion read";
            parser.mensajeDeError(mensaje);
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_READ",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // FUNC_READ ::= Read P_Abierto PARAM_READ P_Cerrado PuntoYComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_READ",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // FIN_BLOQUE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FIN_BLOQUE",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // FIN_BLOQUE ::= PuntoYComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FIN_BLOQUE",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // OP_DEFAULT ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_DEFAULT",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // OP_DEFAULT ::= Default DosPuntos CONTENIDOS_CONTROL FIN_BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_DEFAULT",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // BLOQUE_CASE ::= Case Entero DosPuntos CONTENIDOS_CONTROL FIN_BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE_CASE",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // BLOQUES_CASE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUES_CASE",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // BLOQUES_CASE ::= BLOQUE_CASE BLOQUES_CASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUES_CASE",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // CONTROL_CASE ::= BLOQUES_CASE OP_DEFAULT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTROL_CASE",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // CONTROL_SWITCH ::= Switch error Llave_Cerrada 
            {
              Object RESULT =null;
		
                    parser.mensajeDeError("Error en estructura de switch: se esperaba expresión aritmética entre paréntesis");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTROL_SWITCH",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // CONTROL_SWITCH ::= Switch P_Abierto EXP_ARITMETICA P_Cerrado Llave_Abierta CONTROL_CASE Llave_Cerrada 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTROL_SWITCH",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // CONTROL_WHILE ::= While P_Abierto error P_Cerrado 
            {
              Object RESULT =null;
		  // Error en la expresión dentro de while
                    String mensaje = "Error en la expresión dentro del while";
                    parser.mensajeDeError(mensaje);
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTROL_WHILE",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // CONTROL_WHILE ::= While error Llave_Cerrada 
            {
              Object RESULT =null;
		
                    String mensaje = "Error en estructura de while: se esperaba '(' y ')'";
                    parser.mensajeDeError(mensaje);
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTROL_WHILE",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // CONTROL_WHILE ::= While P_Abierto EXPRESIONES P_Cerrado PuntoYComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTROL_WHILE",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // CONTROL_WHILE ::= While P_Abierto EXPRESIONES P_Cerrado CUERPO_CONTROL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTROL_WHILE",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // INI_FOR ::= PuntoYComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INI_FOR",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // INI_FOR ::= VARIABLE_DEC PuntoYComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INI_FOR",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // INI_FOR ::= TIPO_VAR Identificador INI_VAR LIST_ID_VAR PuntoYComa 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
                if(parser.tablaSimbolos.existeSimbolo(id.toString(), "variables locales")){
                    // si existe dar el error semantico

                }else{
                    parser.tablaSimbolos.agregarSimbolo(id.toString(), var.toString(), "variables locales");
                }
                parser.pilaSemanticaAux.clear();
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INI_FOR",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // CONTROL_FOR ::= For P_Abierto INI_FOR error P_Cerrado CUERPO_CONTROL 
            {
              Object RESULT =null;
		
                    parser.mensajeDeError("Error en las expresiones de control dentro del for");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTROL_FOR",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CONTROL_FOR ::= For error Llave_Cerrada 
            {
              Object RESULT =null;
		
                parser.mensajeDeError("Error en la estructura del for requiere paréntesis o puntos y comas");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTROL_FOR",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // CONTROL_FOR ::= For P_Abierto INI_FOR PuntoYComa P_Cerrado CUERPO_CONTROL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTROL_FOR",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CONTROL_FOR ::= For P_Abierto INI_FOR EXP_BOOLEANA PuntoYComa P_Cerrado CUERPO_CONTROL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTROL_FOR",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // CONTROL_FOR ::= For P_Abierto INI_FOR PuntoYComa EXPRESIONES P_Cerrado CUERPO_CONTROL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTROL_FOR",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CONTROL_FOR ::= For P_Abierto INI_FOR EXP_BOOLEANA PuntoYComa EXPRESIONES P_Cerrado CUERPO_CONTROL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTROL_FOR",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CONTROL_IF ::= If error Llave_Cerrada 
            {
              Object RESULT =null;
		
            String mensaje = "Error en estructura de control if-else";
            parser.mensajeDeError(mensaje);
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTROL_IF",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CONTROL_IF ::= If P_Abierto EXPRESIONES P_Cerrado CUERPO_CONTROL Else CUERPO_CONTROL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTROL_IF",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CONTROL_IF ::= If P_Abierto EXPRESIONES P_Cerrado CUERPO_CONTROL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTROL_IF",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CONTENIDO_CONTROL ::= Continue PuntoYComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTENIDO_CONTROL",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CONTENIDO_CONTROL ::= Break PuntoYComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTENIDO_CONTROL",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CONTENIDO_CONTROL ::= Return VALOR_VAR PuntoYComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTENIDO_CONTROL",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CONTENIDO_CONTROL ::= FUNC_WRITE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTENIDO_CONTROL",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CONTENIDO_CONTROL ::= FUNC_READ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTENIDO_CONTROL",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CONTENIDO_CONTROL ::= CONTROL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTENIDO_CONTROL",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CONTENIDO_CONTROL ::= VARIABLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTENIDO_CONTROL",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CONTENIDOS_CONTROL ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTENIDOS_CONTROL",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CONTENIDOS_CONTROL ::= CONTENIDO_CONTROL CONTENIDOS_CONTROL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTENIDOS_CONTROL",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CUERPO_CONTROL ::= Llave_Abierta CONTENIDOS_CONTROL Llave_Cerrada 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO_CONTROL",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CONTROL ::= CONTROL_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTROL",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CONTROL ::= CONTROL_SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTROL",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CONTROL ::= CONTROL_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTROL",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CONTROL ::= CUERPO_CONTROL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTROL",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CONTROL ::= CONTROL_IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTROL",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CONTROLES ::= CONTROL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTROLES",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CONTROLES ::= CONTROL CONTROLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTROLES",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OP_NEGACION ::= Not 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_NEGACION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OP_LOGICO ::= And 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_LOGICO",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OP_LOGICO ::= Or 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_LOGICO",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OP_COMPARACION ::= Diferente 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_COMPARACION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OP_COMPARACION ::= Menor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_COMPARACION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OP_COMPARACION ::= Menor_Igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_COMPARACION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OP_COMPARACION ::= Mayor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_COMPARACION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OP_COMPARACION ::= Mayor_Igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_COMPARACION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OP_COMPARACION ::= Igual_Igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_COMPARACION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXP_NEGACION ::= OP_NEGACION VALOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_NEGACION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXP_COMPARATIVA ::= VALOR OP_COMPARACION VALOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_COMPARATIVA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXP_BOOLEANA_P ::= EXP_NEGACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_BOOLEANA_P",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXP_BOOLEANA_P ::= OP_NEGACION P_Abierto EXP_BOOLEANA P_Cerrado 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_BOOLEANA_P",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXP_BOOLEANA_P ::= EXP_COMPARATIVA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_BOOLEANA_P",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXP_BOOLEANA_P ::= P_Abierto EXP_BOOLEANA P_Cerrado 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_BOOLEANA_P",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXP_BOOLEANA ::= EXP_BOOLEANA_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_BOOLEANA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXP_BOOLEANA ::= EXP_BOOLEANA OP_LOGICO EXP_BOOLEANA_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_BOOLEANA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OP_ASIGNACION ::= Div_Igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_ASIGNACION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OP_ASIGNACION ::= Mul_Igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_ASIGNACION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OP_ASIGNACION ::= Res_Igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_ASIGNACION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OP_ASIGNACION ::= Sum_Igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_ASIGNACION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OP_ASIGNACION ::= Igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_ASIGNACION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OP_INCREMENTO ::= Decremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_INCREMENTO",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OP_INCREMENTO ::= Incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_INCREMENTO",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OP_ARITMETICO ::= Mod 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICO",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OP_ARITMETICO ::= Mul 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICO",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OP_ARITMETICO ::= Div 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICO",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OP_ARITMETICO ::= Res 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICO",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OP_ARITMETICO ::= Sum 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICO",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // VALOR ::= Identificador P_Abierto P_Cerrado 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                    if(!(parser.tablaSimbolos.existeSimbolo(id.toString()))){
                        // si no existe dar el error semantico
                        Symbol tokenAct = (Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1);
                        parser.msjErrorSemantico("funcion no definida", tokenAct);
                    }
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // VALOR ::= Identificador P_Abierto EXP_FUNC_WRITE PARAMS_WRITE P_Cerrado 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
                    if(!(parser.tablaSimbolos.existeSimbolo(id.toString()))){
                        // si no existe dar el error semantico
                        Symbol tokenAct = (Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1);
                        parser.msjErrorSemantico("funcion no definida", tokenAct);
                    }
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VALOR ::= Identificador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    if(!(parser.tablaSimbolos.existeSimbolo(id.toString()))){
                        // si no existe dar el error semantico
                        Symbol tokenAct = (Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1);
                        parser.msjErrorSemantico("variable no definida", tokenAct);
                    }
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // VALOR ::= Caracter 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // VALOR ::= Res Entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // VALOR ::= Entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXP_ARITMETICA_P ::= VALOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_ARITMETICA_P",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXP_ARITMETICA_P ::= P_Abierto EXP_ARITMETICA P_Cerrado 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_ARITMETICA_P",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXP_ARITMETICA ::= EXP_ARITMETICA_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_ARITMETICA",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXP_ARITMETICA ::= EXP_ARITMETICA OP_ARITMETICO EXP_ARITMETICA_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_ARITMETICA",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // VARIABLE_DEC_SIMPLE ::= Identificador OP_INCREMENTO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                        if(!(parser.tablaSimbolos.existeSimbolo(id.toString()))){
                            // si no existe dar el error semantico
                            Symbol tokenAct = (Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1);
                            parser.msjErrorSemantico("variable no definida", tokenAct);
                        }
                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLE_DEC_SIMPLE",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // VARIABLE_DEC_SIMPLE ::= OP_INCREMENTO Identificador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                        if(!(parser.tablaSimbolos.existeSimbolo(id.toString()))){
                            // si no existe dar el error semantico
                            Symbol tokenAct = (Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1);
                            parser.msjErrorSemantico("variable no definida", tokenAct);
                        }
                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLE_DEC_SIMPLE",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VARIABLE_DEC_SIMPLE ::= Identificador OP_ASIGNACION VALOR_VAR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                        if(!(parser.tablaSimbolos.existeSimbolo(id.toString()))){
                            // si no existe dar el error semantico
                            Symbol tokenAct = (Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1);
                            parser.msjErrorSemantico("variable no definida", tokenAct);
                        }
                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLE_DEC_SIMPLE",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LIST_ID_VAR_DEC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LIST_ID_VAR_DEC",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LIST_ID_VAR_DEC ::= Coma VARIABLE_DEC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LIST_ID_VAR_DEC",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VARIABLE_DEC ::= Identificador OP_INCREMENTO LIST_ID_VAR_DEC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                    if(!(parser.tablaSimbolos.existeSimbolo(id.toString()))){
                        // si no existe dar el error semantico
                        Symbol tokenAct = (Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1);
                        parser.msjErrorSemantico("variable no definida", tokenAct);
                    }
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLE_DEC",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VARIABLE_DEC ::= OP_INCREMENTO Identificador LIST_ID_VAR_DEC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                    if(!(parser.tablaSimbolos.existeSimbolo(id.toString()))){
                        // si no existe dar el error semantico
                        Symbol tokenAct = (Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1);
                        parser.msjErrorSemantico("variable no definida", tokenAct);
                    }
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLE_DEC",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // VARIABLE_DEC ::= Identificador OP_ASIGNACION VALOR_VAR LIST_ID_VAR_DEC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
                    if(!(parser.tablaSimbolos.existeSimbolo(id.toString()))){
                        // si no existe dar el error semantico
                        Symbol tokenAct = (Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1);
                        parser.msjErrorSemantico("variable no definida", tokenAct);
                    }
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLE_DEC",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LIST_ID_VAR ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LIST_ID_VAR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LIST_ID_VAR ::= Coma Identificador INI_VAR LIST_ID_VAR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int list_varsleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int list_varsright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object list_vars = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            String tipoVariable = parser.esGlobal ? "variables globales" : "variables locales";
            if(parser.tablaSimbolos.existeSimbolo(id.toString(), tipoVariable)){
                // si existe dar el error semantico
                System.out.println("Da Error Semantico"); // provisional

            }else{
                parser.tablaSimbolos.agregarSimbolo(id.toString(), "", tipoVariable);
                parser.pilaSemanticaAux.push_end(id.toString());
            }
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LIST_ID_VAR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // VALOR_VAR ::= EXP_BOOLEANA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR_VAR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // VALOR_VAR ::= EXP_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR_VAR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INI_VAR ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INI_VAR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INI_VAR ::= Igual VALOR_VAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INI_VAR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TIPO_VAR ::= Long Long Int 
            {
              Object RESULT =null;
		 RESULT = "long long int"; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_VAR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TIPO_VAR ::= Long Int 
            {
              Object RESULT =null;
		 RESULT = "long int"; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_VAR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TIPO_VAR ::= Short Int 
            {
              Object RESULT =null;
		 RESULT = "short int"; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_VAR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TIPO_VAR ::= Long Long 
            {
              Object RESULT =null;
		 RESULT = "long long"; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_VAR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TIPO_VAR ::= Long 
            {
              Object RESULT =null;
		 RESULT = "long"; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_VAR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TIPO_VAR ::= Short 
            {
              Object RESULT =null;
		 RESULT = "short"; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_VAR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TIPO_VAR ::= Char 
            {
              Object RESULT =null;
		 RESULT = "char"; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_VAR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TIPO_VAR ::= Int 
            {
              Object RESULT =null;
		 RESULT = "int"; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_VAR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VARIABLE ::= Void error PuntoYComa 
            {
              Object RESULT =null;
		
                String mensaje = "Error de inicializacion de variable tipo void";
                parser.mensajeDeError(mensaje);
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VARIABLE ::= error PuntoYComa 
            {
              Object RESULT =null;
		
                String mensaje = "Error de inicializacion de variable(falta tipo)";
                parser.mensajeDeError(mensaje);

            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VARIABLE ::= VARIABLE_DEC PuntoYComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VARIABLE ::= Const TIPO_VAR Identificador INI_VAR LIST_ID_VAR PuntoYComa 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
                String tipoVariable = parser.esGlobal ? "variables globales" : "variables locales";
                if(parser.tablaSimbolos.existeSimbolo(id.toString(), tipoVariable)){
                    // si existe dar el error semantico
                    System.out.println("Da Error Semantico"); // provisional

                }else{
                    parser.tablaSimbolos.agregarSimbolo(id.toString(), var.toString(), tipoVariable);
                    parser.tablaSimbolos.asignarTipo(var.toString());                    
                }
                parser.pilaSemanticaAux.clear();
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VARIABLE ::= TIPO_VAR Identificador INI_VAR LIST_ID_VAR PuntoYComa 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int list_varsleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int list_varsright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object list_vars = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                String tipoVariable = parser.esGlobal ? "variables globales" : "variables locales";
                if(parser.tablaSimbolos.existeSimbolo(id.toString(), tipoVariable)){
                    // si existe dar el error semantico
                    Symbol tokenAct = (Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1);
                    parser.msjErrorSemantico("variable ya declarada", tokenAct);

                }else{
                    parser.tablaSimbolos.agregarSimbolo(id.toString(), var.toString(), tipoVariable);
                    parser.tablaSimbolos.asignarTipo(var.toString());
                    if(tipoVariable == "variables globales"){
                        parser.pilaSemantica.push_end(var.toString());
                        //agregar la lista de variables en caso existir 
                        parser.addListaVariables(parser.pilaSemanticaAux);
                        // agregar la primer variable de la lista 
                        parser.pilaSemantica.push_end(id.toString());
                        // realizar la traduccion de las variables globales
                        parser.addTraduccion(parser.generador.traducirVariablesGlobales(parser.pilaSemantica)); 
                    }
                }
                
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VARIABLES ::= VARIABLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VARIABLES ::= VARIABLES VARIABLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PARAMETRO ::= TIPO_VAR Identificador 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                if(parser.tablaSimbolos.existeSimbolo(id.toString(), "parametros")){
                    // si existe dar el error semantico

                }else{
                    parser.tablaSimbolos.agregarSimbolo(id.toString(), var.toString(), "parametros");
                }
                // las variables dejan de ser globales una vez dentro de una funcion
                parser.esGlobal = false;
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PARAMETROS ::= PARAMETRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // PARAMETROS ::= PARAMETRO Coma PARAMETROS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CONTROL_PARAMETROS ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTROL_PARAMETROS",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CONTROL_PARAMETROS ::= PARAMETROS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTROL_PARAMETROS",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // FUNCION ::= error Llave_Cerrada 
            {
              Object RESULT =null;
		
                String mensaje = "Error en la declaración de funciones";
                parser.mensajeDeError(mensaje);
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FUNCION ::= Void Identificador P_Abierto CONTROL_PARAMETROS P_Cerrado CUERPO_CONTROL 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
                if(parser.tablaSimbolos.existeSimbolo(id.toString(), "funciones")){
                    // si existe dar el error semantico

                }else{
                    parser.tablaSimbolos.agregarSimbolo(id.toString(), "void", "funciones");
                }
                
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FUNCION ::= TIPO_VAR Identificador P_Abierto CONTROL_PARAMETROS P_Cerrado CUERPO_CONTROL 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
                if(parser.tablaSimbolos.existeSimbolo(id.toString(), "funciones")){
                    // si existe dar el error semantico

                }else{
                    parser.tablaSimbolos.agregarSimbolo(id.toString(), var.toString(), "funciones");
                }
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // FUNCIONES ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // FUNCIONES ::= FUNCIONES FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= FUNCIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= VARIABLES FUNCIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

